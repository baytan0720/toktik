// Code generated by MockGen. DO NOT EDIT.
// Source: internal/video/kitex_gen/video/videoservice/client.go

// Package mock_videoservice is a generated GoMock package.
package mock_videoservice

import (
	context "context"
	reflect "reflect"
	video "toktik/internal/video/kitex_gen/video"

	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockClient) Feed(ctx context.Context, Req *video.FeedReq, callOptions ...callopt.Option) (*video.FeedRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Feed", varargs...)
	ret0, _ := ret[0].(*video.FeedRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed.
func (mr *MockClientMockRecorder) Feed(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockClient)(nil).Feed), varargs...)
}

// GetVideo mocks base method.
func (m *MockClient) GetVideo(ctx context.Context, Req *video.GetVideoReq, callOptions ...callopt.Option) (*video.GetVideoRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVideo", varargs...)
	ret0, _ := ret[0].(*video.GetVideoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideo indicates an expected call of GetVideo.
func (mr *MockClientMockRecorder) GetVideo(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideo", reflect.TypeOf((*MockClient)(nil).GetVideo), varargs...)
}

// GetWorkCount mocks base method.
func (m *MockClient) GetWorkCount(ctx context.Context, Req *video.GetWorkCountReq, callOptions ...callopt.Option) (*video.GetWorkCountRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkCount", varargs...)
	ret0, _ := ret[0].(*video.GetWorkCountRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkCount indicates an expected call of GetWorkCount.
func (mr *MockClientMockRecorder) GetWorkCount(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkCount", reflect.TypeOf((*MockClient)(nil).GetWorkCount), varargs...)
}

// IsExist mocks base method.
func (m *MockClient) IsExist(ctx context.Context, Req *video.IsExistReq, callOptions ...callopt.Option) (*video.IsExistRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsExist", varargs...)
	ret0, _ := ret[0].(*video.IsExistRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockClientMockRecorder) IsExist(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockClient)(nil).IsExist), varargs...)
}

// ListVideo mocks base method.
func (m *MockClient) ListVideo(ctx context.Context, Req *video.ListVideoReq, callOptions ...callopt.Option) (*video.ListVideoRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVideo", varargs...)
	ret0, _ := ret[0].(*video.ListVideoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVideo indicates an expected call of ListVideo.
func (mr *MockClientMockRecorder) ListVideo(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideo", reflect.TypeOf((*MockClient)(nil).ListVideo), varargs...)
}

// ListVideoId mocks base method.
func (m *MockClient) ListVideoId(ctx context.Context, Req *video.ListVideoIdReq, callOptions ...callopt.Option) (*video.ListVideoIdRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVideoId", varargs...)
	ret0, _ := ret[0].(*video.ListVideoIdRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVideoId indicates an expected call of ListVideoId.
func (mr *MockClientMockRecorder) ListVideoId(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideoId", reflect.TypeOf((*MockClient)(nil).ListVideoId), varargs...)
}

// PublishVideo mocks base method.
func (m *MockClient) PublishVideo(ctx context.Context, Req *video.PublishVideoReq, callOptions ...callopt.Option) (*video.PublishVideoRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishVideo", varargs...)
	ret0, _ := ret[0].(*video.PublishVideoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishVideo indicates an expected call of PublishVideo.
func (mr *MockClientMockRecorder) PublishVideo(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVideo", reflect.TypeOf((*MockClient)(nil).PublishVideo), varargs...)
}
