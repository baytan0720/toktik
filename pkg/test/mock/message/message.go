// Code generated by MockGen. DO NOT EDIT.
// Source: internal/message/kitex_gen/message/messageservice/client.go

// Package mock_messageservice is a generated GoMock package.
package mock_messageservice

import (
	context "context"
	reflect "reflect"
	message "toktik/internal/message/kitex_gen/message"

	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetLastMessage mocks base method.
func (m *MockClient) GetLastMessage(ctx context.Context, Req *message.GetLastMessageReq, callOptions ...callopt.Option) (*message.GetLastMessageRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastMessage", varargs...)
	ret0, _ := ret[0].(*message.GetLastMessageRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockClientMockRecorder) GetLastMessage(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockClient)(nil).GetLastMessage), varargs...)
}

// ListMessage mocks base method.
func (m *MockClient) ListMessage(ctx context.Context, Req *message.ListMessageReq, callOptions ...callopt.Option) (*message.ListMessageRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMessage", varargs...)
	ret0, _ := ret[0].(*message.ListMessageRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockClientMockRecorder) ListMessage(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockClient)(nil).ListMessage), varargs...)
}

// SendMessage mocks base method.
func (m *MockClient) SendMessage(ctx context.Context, Req *message.SendMessageReq, callOptions ...callopt.Option) (*message.SendMessageRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*message.SendMessageRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientMockRecorder) SendMessage(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), varargs...)
}
