// Code generated by MockGen. DO NOT EDIT.
// Source: /home/cksfafwefasdf/gitrepo/toktik/internal/feed/kitex_gen/feed/feedservice/client.go

// Package mock_feedservice is a generated GoMock package.
package mock_feedservice

import (
	context "context"
	reflect "reflect"
	feed "toktik/internal/feed/kitex_gen/feed"

	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockClient) Feed(ctx context.Context, Req *feed.FeedReq, callOptions ...callopt.Option) (*feed.FeedRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Feed", varargs...)
	ret0, _ := ret[0].(*feed.FeedRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed.
func (mr *MockClientMockRecorder) Feed(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockClient)(nil).Feed), varargs...)
}
