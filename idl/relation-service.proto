syntax = "proto3";
package relation;
option go_package = "relation";

enum Status {
  OK = 0;
  ERROR = 1;
}

message UserInfo {
  int64 id = 1;                // 用户id
  string name = 2;             // 用户名称
  int64 follow_count = 3;      // 关注总数
  int64 follower_count = 4;    // 粉丝总数
  bool is_follow = 5;          // true-已关注，false-未关注
  string avatar = 6;           //用户头像
  string background_image = 7; //用户个人页顶部大图
  string signature = 8;        //个人简介
  int64 total_favorited = 9;   //获赞数量
  int64 work_count = 10;       //作品数量
  int64 favorite_count = 11;   //点赞数量
}

message FollowInfo {
  int64 user_id = 1;
  int64 follow_count = 2;
  int64 follower_count = 3;
  bool is_follow = 4;
}

message GetFollowInfoReq {
  int64 user_id = 1;     // 用户id
  repeated int64 to_user_id_list = 2; // 要查询的用户的ID列表
}

message GetFollowInfoRes {
  Status status = 1;     // 状态码，0-成功，其他值-失败
  string err_msg = 2;    // 返回状态描述
  repeated FollowInfo follow_info_list = 3; // 查询的用户关注信息列表
}

message FollowReq {
  int64 user_id = 1;
  int64 to_user_id = 2;
}

message FollowRes {
  Status status = 1;     // 状态码，0-成功，其他值-失败
  string err_msg = 2; // 返回状态描述
}

message UnfollowReq {
  int64 user_id = 1;
  int64 to_user_id = 2;
}

message UnfollowRes {
  Status status = 1;     // 状态码，0-成功，其他值-失败
  string err_msg = 2; // 返回状态描述
}

message ListFollowReq {
  int64 user_id = 1; // 用户id
}

message ListFollowRes {
  Status status = 1;           // 状态码，0-成功，其他值-失败
  string err_msg = 2;       // 返回状态描述
  repeated UserInfo users = 3; // 用户信息列表
}

message ListFollowerReq {
  int64 user_id = 1; // 用户id
}

message ListFollowerRes {
  Status status = 1;           // 状态码，0-成功，其他值-失败
  string err_msg = 2;       // 返回状态描述
  repeated UserInfo users = 3; // 用户列表
}

message ListFriendReq {
  int64 user_id = 1; // 用户id
}

message ListFriendRes {
  Status status = 1;                 // 状态码，0-成功，其他值-失败
  string err_msg = 2;             // 返回状态描述
  repeated FriendUser users = 3; // 用户列表
}

message FriendUser {
  UserInfo user = 1;
  string message = 2; // 和该好友的最新聊天消息
  int64 msg_type = 3; // message消息的类型，0 => 当前请求用户接收的消息， 1 => 当前请求用户发送的消息
}

service RelationService {
  rpc GetFollowInfo(GetFollowInfoReq) returns (GetFollowInfoRes);
  rpc Follow(FollowReq) returns (FollowRes);
  rpc Unfollow(UnfollowReq) returns (UnfollowRes);
  rpc ListFollow(ListFollowReq) returns (ListFollowRes);
  rpc ListFollower(ListFollowerReq) returns (ListFollowerRes);
  rpc ListFriend(ListFriendReq) returns (ListFriendRes);
}