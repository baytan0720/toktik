syntax = "proto3";
package user;
option go_package = "user";

enum Status {
  OK = 0;
  ERROR = 1;
}

message UserInfo {
  int64 id = 1; // 用户id
  string name = 2; // 用户名称
  int64 follow_count = 3; // 关注总数
  int64 follower_count = 4; // 粉丝总数
  bool is_follow = 5; // true-已关注，false-未关注
  string avatar = 6; //用户头像
  string background_image = 7; //用户个人页顶部大图
  string signature = 8; //个人简介
  int64 total_favorited = 9; //获赞数量
  int64 work_count = 10; //作品数量
  int64 favorite_count = 11; //点赞数量
}

message RegisterReq {
  string username = 1; // 注册用户名，最长32个字符
  string password = 2; // 密码，最短6个字符，最长32个字符
}

message RegisterRes {
  Status status = 1;
  string err_msg = 2;
  int64 user_id = 3; // 用户id
}

message LoginReq {
  string username = 1; // 登录用户名
  string password = 2; // 登录密码
}

message LoginRes {
  Status status = 1;
  string err_msg = 2;
  int64 user_id = 3; // 用户id
}

message GetUserInfoReq {
  int64 user_id = 1; // 请求方用户id
  int64 to_user_id = 2; // 用户id
}

message GetUserInfoRes {
  Status status = 1;
  string err_msg = 2;
  UserInfo user = 3; // 用户信息
}

message GetUserInfosReq {
  int64 user_id = 1; // 请求方用户id
  repeated int64 to_user_ids = 2; // 用户id
}

message GetUserInfosRes {
  Status status = 1;
  string err_msg = 2;
  repeated UserInfo users = 3; // 用户信息
}

service UserService {
  rpc Register(RegisterReq) returns (RegisterRes);
  rpc Login(LoginReq) returns (LoginRes);
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoRes);
  rpc GetUserInfos(GetUserInfosReq) returns (GetUserInfosRes);
}